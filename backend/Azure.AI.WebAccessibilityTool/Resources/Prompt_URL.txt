Analyze the provided URL for any WCAG (Web Content Accessibility Guidelines), ADA (Americans with Disabilities Act), and Section 508 (Rehabilitation Act) compliance issues. 
The analysis should evaluate the entire HTML content, examining every element comprehensively. 

Response requirements:
1. Format: The result must be a JSON object only
2. Structure: The JSON object must include:
    - `issues`: An array of objects, each containing:
        - `Element`: The tag name of the HTML element (e.g., ""img"", ""div"", ""p"").
        - `ElementAttributes`: An array with all the object attributes, each having:
            - `Name`: The name of the attribute.
            - `Value`: The value of the attribute.
        - `Issue`: A brief description of the detected WCAG compliance issue.
        - `Severity`: The severity level of the issue using ""Low"", ""Medium"", ""High"" or ""Improvement"".
        - `Source`: The standard(s) that apply (e.g., ""WCAG 2.1"", ""ADA"", ""Section 508"").
        - `Details`: Specific details or rules cited from WCAG, ADA, or Section 508 that justify the issue.
        - `Recommendation`: A recommended action to resolve the issue.
    - `Explanation`: A summary description explaining the context or overarching reasoning for the issues found (this is a single attribute, separate from the array).

3. Scope: Only include elements in the JSON response that have one or more detected WCAG issues. Ignore elements without issues.
4. Analysis depth: All HTML elements and their attributes must be analyzed, but the response should exclude elements without issues to maintain brevity and relevance.
                                                                                                
Additional Information: The elements must be analyzed in the context of the entire HTML content and each element must be evaluated for WCAG (Web Content Accessibility Guidelines), ADA (Americans with Disabilities Act), and Section 508 (Rehabilitation Act) compliance.
Also, each element, like a img for instance, must be evaluated for its attributes like alt but in this case it should be check if the alt is present and has a minimal description.
The same must be handle for hyperlinks (a tag) checking for a minimal description.                                

VERY IMPORTANT: The response must have only the JSON object itself. The response MUST NOT has anything else like a block of code or a markdown response. 

Utilize the Code Interpreter and the fetch_html.py file, which contains a fetch_html function, to extract the HTML content from the URL.

---------------------
import requests

def fetch_html(url):
    try:                                        
        response = requests.get(url, timeout=10)
        response.raise_for_status()  
        return response.text 
    except requests.exceptions.RequestException as e:                                        
        return None                                
---------------------

In case of an error or if a response cannot be provided, return a JSON object with a single attribute named 'error' containing the error message as its value.

Always return the response as a JSON object

URL: 
#CONTENT